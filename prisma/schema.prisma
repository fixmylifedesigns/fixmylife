// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firebaseUid   String    @unique
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  subscriptions Subscription[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // "oauth", "email"
  provider          String  // "google", "youtube", "facebook", etc.
  providerAccountId String  // The unique ID from the provider (e.g., Google user ID or YouTube channel ID)
  refresh_token     String? @db.Text // Used for refreshing access to YouTube API
  access_token      String? @db.Text // Expires, so needs refreshing
  expires_at        Int? // When the access token expires
  token_type        String?
  scope             String? // Scopes granted during OAuth
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Prevents duplicate connections
  @@index([userId])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeSubscriptionId String             @unique
  status               SubscriptionStatus @default(ACTIVE)
  plan                 SubscriptionPlan
  startDate            DateTime           @default(now())
  endDate              DateTime
  nextBillingDate      DateTime?
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum SubscriptionPlan {
  MONTHLY
  YEARLY
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             String     @id @default(cuid())
  platformPostId String?    @unique // YouTube video ID (null until published)
  title          String     @db.Text
  description    String     @db.Text
  scheduledFor   DateTime? // null for immediate posts
  publishedAt    DateTime? // filled when actually published
  thumbnailUrl   String?    @db.Text
  sourceUrl      String     @db.Text // URL of the source video (TikTok, etc)
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  status         PostStatus @default(DRAFT)
  platform       Platform   @default(YOUTUBE)
  visibility     Visibility @default(PUBLIC)
  categoryId     String? // YouTube category ID
  tags           String[]
  views          Int        @default(0)
  likes          Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  errorMessage   String?    @db.Text // For failed uploads
  retryCount     Int        @default(0) // For tracking upload attempts

  @@index([userId])
  @@index([status])
  @@index([scheduledFor])
  @@index([publishedAt])
}

enum PostStatus {
  DRAFT // Initial state
  SCHEDULED // Scheduled for future posting
  PROCESSING // Currently being uploaded
  PUBLISHED // Successfully uploaded
  FAILED // Upload failed
  CANCELLED // User cancelled the post
}

enum Platform {
  YOUTUBE
  // Future platforms
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}
